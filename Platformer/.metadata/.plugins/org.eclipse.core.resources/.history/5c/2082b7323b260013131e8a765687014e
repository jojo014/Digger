package display;

import gfx.Hud;
import gfx.Screen;

import java.awt.BorderLayout;
import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;

import javax.swing.JFrame;

import level.Level;
import display.entities.Mob;
import display.entities.Player;
import display.entities.Spider;

public class Game extends Canvas implements Runnable {

	public static final int HEIGHT = 300, WIDTH = HEIGHT * 16 / 9;
	public static final int SCALE = 3;
	private static final Dimension SIZE = new Dimension(WIDTH*SCALE,HEIGHT*SCALE);
	public int tickCount = 0;
	public int healthPosX = 50, healthPosY = 678;
	public int playerSpawnX = 16 * 1, playerSpawnY = 16 * 19;
	public int spiderSpawnX = 16 * 3, spiderSpawnY = 16 * 17;
	public int staminaPosX = 95, staminaPosY = 725;
	public int scaleX = 1600 / (1 + getWidth()), scaleY = 900 / (getHeight() + 1);

	public BufferedImage image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);
	public int[] pixels = ((DataBufferInt) image.getRaster().getDataBuffer()).getData();

	private JFrame frame;
	private Screen screen;
	private Level level;
	private Player player;
	private Spider spider;
	private Mob mob;
	private Hud hud;

	public static InputHandler input;
	public boolean running = false;

	public String NAME = "Digger";

	public Game() {

		setMinimumSize(SIZE);
		setMaximumSize(SIZE);
		setPreferredSize(SIZE);

		frame = new JFrame(NAME);

		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setLayout(new BorderLayout());
		frame.add(this, BorderLayout.CENTER);
		frame.pack();

		frame.setResizable(true);
		frame.setLocationRelativeTo(null);
		frame.setVisible(true);

		input = new InputHandler(this);

		screen = new Screen(WIDTH, HEIGHT);
		level = new Level("/Level.png");

		player = new Player(level, playerSpawnX, playerSpawnY, input);
		spider = new Spider(level, spiderSpawnX, spiderSpawnY);

		hud = new Hud(level, 15, 16 * 15);
		level.addEntity(player);
		level.addEntity(spider);

	}

	public static void main(String[] a) {
		new Game().start();
	}

	public void init() {

	}

	private void start() {
		running = true;
		new Thread(this).start();
	}

	private void stop() {
		running = false;
	}

	@Override
	public void run() {
		long lastTime = System.nanoTime();
		double nsPerTick = 1000000000D / 60D;

		int frames = 0;
		int ticks = 0;

		long lastTimer = System.currentTimeMillis();
		double delta = 0;

		init();
		requestFocus();

		while (running) {
			long now = System.nanoTime();
			delta += (now - lastTime) / nsPerTick;
			lastTime = now;
			boolean shouldRender = true;

			while (delta >= 1) {
				ticks++;
				tick();
				delta -= 1;
				shouldRender = true;
			}

			try {
				Thread.sleep(2);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}

			if (shouldRender) {
				frames++;
				render();
			}

			if (System.currentTimeMillis() - lastTimer > 1000) {
				lastTimer += 1000;
				System.out.println(ticks + " ticks, " + frames + " frames");
				frames = 0;
				ticks = 0;
				shouldRender = true;
			}

		}
	}

	public void respawn() {
		if (player.health <= 0) {
			player.x = playerSpawnX;
			player.y = playerSpawnY;
			player.health = player.fullHealth;
			hud.lives--;
			player.respawned = true;
		}
	}

	private void tick() {
		if (!input.pause) {
			tickCount++;
			level.tick();
			respawn();
			for (int i = 0; i < pixels.length; i++) {
				pixels[i] = i + tickCount;
			}
		}
	}

	private void render() {
		BufferStrategy bs = getBufferStrategy();
		if (bs == null) {
			createBufferStrategy(3);
			return;
		}
		float scaleX = (getWidth() / 1600) + 1;
		float scaleY = (getHeight() / 900) + 1;

		Font f = new Font("SansSerriff", Font.BOLD, 32);

		int xOffset = player.x - screen.width / 2;
		int yOffset = player.y - screen.height / 2;

		level.render(xOffset, yOffset, screen);
		level.renderEntities(screen);
		spider.render(screen);
		player.render(screen);

		hud.render(screen);

		for (int i = 0; i < pixels.length; i++) {
			pixels[i] = screen.pixel[i];
		}

		Graphics g = bs.getDrawGraphics();
		
		g.drawImage(image, 0, 0, getWidth(), getHeight(), null);
		g.setColor(Color.RED);
		g.fillRect(healthPosX, (int) (healthPosY + 132 * (1 - player.healthPercent)), 38, (int) (132 * player.healthPercent));
		g.setColor(Color.YELLOW);
		g.fillRect(staminaPosX, (int) (staminaPosY + 85 * (1 - player.staminaPercent)), 38, (int) (85 * player.staminaPercent));
		if (input.pause) {
			g.setColor(Color.DARK_GRAY);
			g.fillRect(getWidth() / 4, getHeight() / 4, 800, 450);
			g.setColor(Color.BLACK);
			g.setFont(f);
			g.drawString("PAUSED", getWidth() / 2 - 75, getHeight() / 2 - 200);
		}
		/*if (hud.gameOver) {
			g.setColor(Color.BLACK);
			g.fillRect(0, 0, getWidth(), getHeight());
			g.setColor(Color.WHITE);
			g.setFont(f);
			g.drawString("Game Over", getWidth() / 2, getHeight() / 2);
		}*/
		g.dispose();
		bs.show();

	}

}
